{% extends 'base.html.twig' %}

{% block title %}Monitoring{% endblock %}

{% block body %}
<div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 g-3 mt-2">
        {% for moduleInfo in modulesInfo %}
        <div class="col">
            <div class="card shadow-sm" style="height: 300px; width: 100%;">
                <div class="card-body">
                    <h5 class="card-title text-center">{{ moduleInfo.module.nomModule }}</h5>
                    <div class="d-flex justify-content-between align-items-center">
                        <p>Etat:
                            {% if moduleInfo.releves|length > 0 %}
                                {% set dernierReleve = moduleInfo.releves|last %}
                                <i class="bi bi-circle-fill {{ dernierReleve.etat ? 'text-success' : 'text-danger' }}"></i>
                                {% else %}
                                <i class="bi bi-circle-fill text-muted"></i>
                            {% endif %}
                        </p>
                        <div>
                            <a href="{{ path('app_view_module', {'id': moduleInfo.module.idModule}) }}" class="btn btn-sm btn-outline-secondary">Détail</a>
                            <a href="{{ path('app_delete_monitoring', {'id': moduleInfo.module.idModule}) }}" class="btn btn-sm btn-outline-secondary"><i class="bi bi-dash-circle"></i></a>
                        </div>
                    </div>
                    <div>
                        <canvas id="chart-{{ moduleInfo.module.idModule }}"></canvas>
                        <div id="chartLabels-{{ moduleInfo.module.idModule }}" style="display: none;">{{ moduleInfo.chartLabels }}</div>
                        <div id="chartData-{{ moduleInfo.module.idModule }}" style="display: none;">{{ moduleInfo.chartData }}</div>
                    </div>
                </div>
            </div>
        </div>
        {% endfor %}
    <div class="col">
        <div class="card shadow-sm" style="height: 300px; width: 100%;">
            <a href="{{ path('app_add_module_monitoring') }}" class="stretched-link d-flex justify-content-center align-items-center link-body-emphasis text-decoration-none" style="height: 100%;">
                <div class="card-body d-flex justify-content-center align-items-center" style="height: 100%;">
                    <span class="bi bi-plus-circle text-secondary " style="font-size: 4em;"></span>
                </div>
            </a>
        </div>
    </div>
</div>

<script>
    console.log('chartModule.js is loaded');

    document.addEventListener('DOMContentLoaded', (event) => {
        if (typeof Chart !== 'undefined') {
            console.log('Chart.js is loaded');
        } else {
            console.error('Chart.js is not loaded');
        }

        {% for moduleInfo in modulesInfo %}
            (function() {
                const chartLabels = JSON.parse(document.getElementById('chartLabels-{{ moduleInfo.module.idModule }}').innerText);
                const chartData = JSON.parse(document.getElementById('chartData-{{ moduleInfo.module.idModule }}').innerText);
                const ctx = document.getElementById('chart-{{ moduleInfo.module.idModule }}').getContext('2d');

                const filteredData = chartData.filter(value => value !== null);

                const minValue = Math.min(...filteredData);
                const maxValue = Math.max(...filteredData);

                let margin = (maxValue - minValue) * 0.1;

                if (minValue === maxValue) {
                    margin = maxValue * 0.1; 
                }

                const minY = minValue - margin;
                const maxY = maxValue + margin;

                new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: chartLabels,
                        datasets: [{
                            label: 'Mesure Module',
                            data: chartData,
                            borderWidth: 1
                        }]
                    },
                    options: {
                        scales: {
                            y: {
                                beginAtZero: false,
                                min: minY,
                                max: maxY, 
                            }
                        }
                    }
                });
            })();
        {% endfor %}

        // Vérifie l'état des modules 
        function checkModuleStatus() {
            let modulesInError = [];
            {% for moduleInfo in modulesInfo %}
                {% if moduleInfo.releves|length > 0 %}
                    {% set dernierReleve = moduleInfo.releves|last %}
                    if (!{{ dernierReleve.etat ? 'true' : 'false' }}) {
                        modulesInError.push('{{ moduleInfo.module.nomModule }}');
                    }
                {% endif %}
            {% endfor %}

            if (modulesInError.length > 0) {
                toastr.options.timeOut = 10000; 
                toastr.error('Les modules suivants sont en erreur : ' + modulesInError.join(', '), 'Erreur de Module');
            }
        }

        checkModuleStatus();

        setInterval(function() {
            location.reload();
        }, 31000);
    });

</script>
{% endblock %}
